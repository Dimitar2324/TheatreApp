// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheatreApp.Data;

#nullable disable

namespace TheatreApp.Data.Migrations
{
    [DbContext(typeof(TheatreAppDbContext))]
    [Migration("20251006121141_AddedManagerEntity")]
    partial class AddedManagerEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TheatreApp.Data.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows whether user manager rights are deactivated or not");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Manager user entity");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Manager int the system");
                        });
                });

            modelBuilder.Entity("TheatreApp.Data.Models.Performance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Performance identifier");

                    b.Property<int>("AvailableSeats")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The count of the available seats for the performance");

                    b.Property<string>("HallName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the hall in which the performance will be done");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows whether performance is deleted");

                    b.Property<Guid>("PlayId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Play which will be performed");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasComment("Shows start time of the performance");

                    b.HasKey("Id");

                    b.HasIndex("PlayId");

                    b.ToTable("Performances", t =>
                        {
                            t.HasComment("Perfomance in the system");
                        });
                });

            modelBuilder.Entity("TheatreApp.Data.Models.Play", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Play identifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Play Author");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Play Description");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Play Director");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasComment("Play Duration");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Play Genre");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Play Image URL");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Show whether the Play is deleted");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasComment("Play Release Date");

                    b.Property<string>("ScreenWriter")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Play ScreenWriter");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Play title");

                    b.HasKey("Id");

                    b.ToTable("Plays", t =>
                        {
                            t.HasComment("Play in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Author = "William Shakespeare",
                            Description = "A tragedy exploring revenge, betrayal, and madness as Prince Hamlet seeks justice for his father's murder.",
                            Director = "Laurence Olivier",
                            Duration = 160,
                            Genre = "Tragedy",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/d/df/Hamlet.jpg",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(1601, 1, 1),
                            ScreenWriter = "Tom Stoppard",
                            Title = "Hamlet"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Author = "Victor Hugo",
                            Description = "A musical adaptation of Hugo's novel, portraying love, justice, and redemption during revolutionary France.",
                            Director = "Cameron Mackintosh",
                            Duration = 180,
                            Genre = "Musical",
                            ImageUrl = "https://en.wikipedia.org/wiki/Les_Mis%C3%A9rables#/media/File:Emile_Bayard_-_Cosette.jpg",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(1980, 9, 24),
                            ScreenWriter = "Claude-Michel Schönberg",
                            Title = "Les Miserables"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Author = "Henrik Ibsen",
                            Description = "A groundbreaking play exploring gender roles and individual freedom in 19th-century society.",
                            Director = "Joseph Losey",
                            Duration = 135,
                            Genre = "Drama",
                            ImageUrl = "https://en.wikipedia.org/wiki/A_Doll%27s_House#/media/File:Adeleide_Johannessen_som_Nora_i_%22Et_dukkehjem%22,_Bergen_(11286565955).jpg",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(1879, 12, 21),
                            ScreenWriter = "Christopher Hampton",
                            Title = "A Doll's House"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Author = "Samuel Beckett",
                            Description = "An absurdist play in which two men wait endlessly for someone who never arrives.",
                            Director = "Peter Hall",
                            Duration = 140,
                            Genre = "Absurdist",
                            ImageUrl = "https://en.wikipedia.org/wiki/Waiting_for_Godot#/media/File:En_attendant_Godot,_Festival_d'Avignon,_1978.jpeg",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(1953, 1, 5),
                            ScreenWriter = "Samuel Beckett",
                            Title = "Waiting for Godot"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Author = "Arthur Miller",
                            Description = "A classic American tragedy about Willy Loman, a man destroyed by false dreams of success.",
                            Director = "Elia Kazan",
                            Duration = 150,
                            Genre = "Tragedy",
                            ImageUrl = "https://en.wikipedia.org/wiki/Death_of_a_Salesman#/media/File:DeathOfASalesman.jpg",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(1949, 2, 10),
                            ScreenWriter = "Arthur Miller",
                            Title = "Death of a Salesman"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Author = "Gaston Leroux",
                            Description = "A haunting musical about love, obsession, and mystery beneath the Paris Opera House.",
                            Director = "Harold Prince",
                            Duration = 175,
                            Genre = "Musical",
                            ImageUrl = "https://en.wikipedia.org/wiki/The_Phantom_of_the_Opera_(1986_musical)#/media/File:The_Phantom_of_the_Opera_(1986_musical).jpg",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(1986, 10, 9),
                            ScreenWriter = "Andrew Lloyd Webber",
                            Title = "The Phantom of the Opera"
                        });
                });

            modelBuilder.Entity("TheatreApp.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ticket identifier");

                    b.Property<Guid>("PerformanceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the performance");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("Ticket price");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int")
                        .HasComment("SeatNumber in the theatre");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the user");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets", t =>
                        {
                            t.HasComment("Ticket in the system");
                        });
                });

            modelBuilder.Entity("TheatreApp.Data.Models.UserPlay", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the user");

                    b.Property<Guid>("PlayId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the play");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows whether UserPlay entry is deleted");

                    b.HasKey("UserId", "PlayId");

                    b.HasIndex("PlayId");

                    b.ToTable("UsersPlays", t =>
                        {
                            t.HasComment("User's favourites entry in the system");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheatreApp.Data.Models.Manager", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("TheatreApp.Data.Models.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheatreApp.Data.Models.Performance", b =>
                {
                    b.HasOne("TheatreApp.Data.Models.Play", "Play")
                        .WithMany("Performances")
                        .HasForeignKey("PlayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Play");
                });

            modelBuilder.Entity("TheatreApp.Data.Models.Ticket", b =>
                {
                    b.HasOne("TheatreApp.Data.Models.Performance", "Performance")
                        .WithMany("Tickets")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheatreApp.Data.Models.UserPlay", b =>
                {
                    b.HasOne("TheatreApp.Data.Models.Play", "Play")
                        .WithMany("PlayUsers")
                        .HasForeignKey("PlayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Play");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheatreApp.Data.Models.Performance", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TheatreApp.Data.Models.Play", b =>
                {
                    b.Navigation("Performances");

                    b.Navigation("PlayUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
